// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// TODO - relation between models is Pending

enum Role {
  admin
  user
}

enum VerificationCodeType {
  email
  password
}

model User {
  id        String   @id @default(cuid())
  name      String?
  username  String   @unique
  email     String   @unique
  password  String
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  spaces            Space[]
  verificationCodes VerificationCode[]
  sessions          Sessions[]

  // avatarId Int?    @default(1)
  // avatar   Avatar? @relation(fields: [avatarId], references: [id])
}

model VerificationCode {
  id        String               @id @default(cuid())
  type      VerificationCodeType
  expiresAt DateTime
  createdAt DateTime             @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Sessions {
  id        Int      @id @default(autoincrement())
  userAgent String?
  createdAt DateTime @default(now())
  expiresAt DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Avatar {
  id       Int     @id @unique @default(autoincrement())
  imageUrl String?
  name     String?
  // users    User[]
}

model Space {
  id        String   @id @unique @default(cuid())
  name      String
  // width     Int
  // height    Int?
  dimesions String
  thumbnail String?
  capacity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  creatorId String
  creator   User   @relation(fields: [creatorId], references: [id])

  elements SpaceElements[]
}

model SpaceElements {
  id String @id @unique @default(cuid())
  x  Int
  y  Int

  spaceId String
  space   Space  @relation(fields: [spaceId], references: [id])

  elementId String
  element   Element @relation(fields: [elementId], references: [id])
}

model Element {
  id       String  @id @unique @default(cuid())
  width    Int
  height   Int
  imageUrl String
  static   Boolean

  spaces      SpaceElements[]
  mapElements MapElements[]
}

model Map {
  id          String @id @unique @default(cuid())
  width       Int
  height      Int
  name        String
  maxCapacity Int

  mapElements MapElements[]
}

model MapElements {
  id String @id @unique @default(cuid())
  x  Int?
  y  Int?

  elementId String
  element   Element @relation(fields: [elementId], references: [id])
  mapId     String
  map       Map     @relation(fields: [mapId], references: [id])
}
